import argparse
import socket
import shlex
import subprocess
import sys
import textwrap
import threading

class NetCat:
    # Initialize the NetCat object with arguments from the command line and buffer
    def __init__(self, args, buffer=None):
        self.args = args
        self.buffer = buffer
        # Create socket object to manage conexions, with ip4 and TPC protocol
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    
    # Entry point for the NetCat object, delegates execution to two methods
    def run (self):
        if self.args.listen:
            # If it was set up with listener, listen method is called
            self.listen()
        else:
            # Else we call the send method
            self.send()


        



# Function that recieves the command and execute it on local machine
# and return the output as string
def execute (comando):
    cmd = comando.strip()
    if not cmd:
        return
    
    # Subprocess library is used to crate a process interface, then using its
    # check_output method to run a command on local operating system and retun
    # the output from that command and store it on output variable
    output = subprocess.check_output(shlex.split(cmd),
                                     stderr=subprocess.STDOUT)
    return output.decode()


if __name__ == '__main__':
    # argparse module its used to create a command line interface
    parser = argparse.ArgumentParser(description='LoCo Net Tool',
                                     formatter_class=argparse.RawDescriptionHelpFormatter,
                                     # Provided example usage that the program will display when the user invokes it with --help 
                                     epilog=textwrap.dedent('''Example: 
                                                            netcat.py -t 192.168.1.108 -p 5555 -l -c -#- command shell
                                                            netcat.py -t 192.168.1.108 -p 5555 -l -u=mytest.txt -#- upload a file
                                                            netcat.py -t 192.168.1.108 -p 5555 -l -e=\"cat /etc/passwd\" -#- execute command
                                                            echo 'ABC' | ./netcat.py -t 192.168.1.108 -p 135 -#- echo text to server port 135
                                                            netcat.py -t 192.168.1.108 -p 5555 -#- connect to server
                                                            '''))
    # Six arguments are defined for the command line, with respective usage data
    # Both sender an receiver can use this program, the arguments define whether it's invoked to send or to listen
    # The -c, -e, -u imply the -l command, because apply only to the listener side of communication
    # The sender connects to the listener and only needs the -t and -p argumentos to connect  
    parser.add_argument('-c', '--command', action='store_true', help='sets up a command shell')
    parser.add_argument('-e', '--execute', help='execute one specified command')
    parser.add_argument('-l', '--listen', action='store_true', help='Set server to listen requests')
    parser.add_argument('-p', '--port', type=int, default=5555, help='specified port')
    parser.add_argument('-t', '--target', default='127.0.0.1', help='specified targuet IP')
    parser.add_argument('-u', '--upload', help='specifies name of a file to upload')
    args = parser.parse_args
    # If its setting up as a listener, invoke NetCat object with empty buffer string, otherwise
    # we send the buffer content from stdin
    if args.listen:
        buffer = ''
    else:
        buffer = sys.stdin.read()
    nc = NetCat(args, buffer.encode())
    nc.run()



