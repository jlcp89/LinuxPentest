import argparse
import socket
import shlex
import subprocess
import sys
import textwrap
import threading

class NetCat:
    # Initialize the NetCat object with arguments from the command line and buffer
    def __init__(self, args, buffer=None):
        self.args = args
        self.buffer = buffer
        # Create socket object to manage conexions, with ip4 and TPC protocol
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    
    # Entry point for the NetCat object, delegates execution to two methods
    def run (self):
        if self.args.listen:
            # If it was set up with listener, listen method is called
            self.listen()
        else:
            # Else we call the send method
            self.send()

    def send(self):
        # Connecto to target ip and port, if have buffer, sent that to target first
        self.socket.connect((self.args.target, self.args.port))
        if self.buffer:
            self.socket.send(self.buffer)
        # Set up try/catch block so can manually close connection with CTRL-C
        try:
            # Start a loop to receive data from target
            while True:
                recv_len = 1
                response = ''
                while recv_len:
                    data = self.socket.recv(4096)
                    recv_len = len(data)
                    response += data.decode()
                    # If there is no more data, break out of the loop
                    if recv_len < 4096:
                        break
                # If ther is data,  print the respnose and pause to get interactive input
                if response:
                    print(response)
                    buffer = input('> ')
                    buffer += '\n'
                    # sent input to target and continue the loop 
                    self.socket.send(buffer.encode())
        # The loop continues until CTRL-C is invoke
        except KeyboardInterrupt:
            print('User terminated connection')
            self.socket.close()
            sys.exit()
    
    def listen(self):
        # Bind target and port
        self.socket.bind((self.args.target, self.args.port))
        # Stablish server to listen, max backlog of 5
        self.socket.listen(5)
        # Begin to listen in a loop
        while True:
            client_socket, _ =self.socket.accept()
            # Passing the connected socket to the handle method
            client_thread = threading.Thread(target=self.handle, args=(client_socket,))
            client_thread.start()
    
    # This method executes the task corresponding to the command line argument it receives
    # execute a command, upload a file or start a shell
    def handle(self, client_socket):
        try:
            # If a command should be executed, handle passes that command to the execute function
            # and sends the output back on the socket
            if self.args.execute:
                output = execute(self.args.execute)
                client_socket.send(output.encode())
            # If upload a file, set up a loopt to listen for content on the listening socket and 
            # receive data until there's no more data comming in.  
            elif self.args.upload:
                file_buffer = b''
                while True:
                    data = client_socket.recv(4096)
                    if data:
                        file_buffer += data
                    else:
                        break
                # Then write accumulated content to the specified file, sends back on the socket
                with open(self.args.upload, 'wb') as f:
                    f.write(file_buffer)
                message = f'Saved file {self.args.upload}'
                client_socket.send(message.encode())

            # Create a shell
            elif self.args.command:
                cmd_buffer = b''
                # Set up a loop
                while True:
                    try:
                        # Send prompt to the sender
                        client_socket.send(b'LoCo: #> ')
                        # Wait for a command string to come back
                        while b'\n' not in cmd_buffer:
                            cmd_buffer += client_socket.recv(64)
                        # Execute the command using execute function
                        response = execute(cmd_buffer.decode('utf-8'))
                        # If ther is a response, return the output of the command to the sender
                        if response:
                            client_socket.send(response.encode('utf-8'))
                        cmd_buffer = b''
                    except Exception as e:
                        print(f'Server killed on error: {e}')
                        self.socket.close()
                        sys.exit()
        finally:
            client_socket.close()


# Function that recieves the command and execute it on local machine
# and return the output as string
def execute(comando):
    cmd = comando.strip()
    if not cmd:
        return
    
    try:
        # Use subprocess.run instead of check_output, and capture_output to get the result
        result = subprocess.run(cmd, capture_output=True, text=True, check=True)
        return result.stdout
    except subprocess.CalledProcessError as e:
        return str(e)
    
    # Subprocess library is used to crate a process interface, then using its
    # check_output method to run a command on local operating system and retun
    # the output from that command and store it on output variable
    #output = subprocess.check_output(shlex.split(cmd),
    #                                 stderr=subprocess.STDOUT)
    #return output.decode()


if __name__ == '__main__':
    # argparse module its used to create a command line interface
    parser = argparse.ArgumentParser(description='LoCo Net Tool',
                                     formatter_class=argparse.RawDescriptionHelpFormatter,
                                     # Provided example usage that the program will display when the user invokes it with --help 
                                     epilog=textwrap.dedent('''Example: 
                                                            netcat.py -t 192.168.1.108 -p 5555 -l -c -#- command shell
                                                            netcat.py -t 192.168.1.108 -p 5555 -l -u=mytest.txt -#- upload a file
                                                            netcat.py -t 192.168.1.108 -p 5555 -l -e=\"cat /etc/passwd\" -#- execute command
                                                            echo 'ABC' | ./netcat.py -t 192.168.1.108 -p 135 -#- echo text to server port 135
                                                            netcat.py -t 192.168.1.108 -p 5555 -#- connect to server
                                                            '''))
    # Six arguments are defined for the command line, with respective usage data
    # Both sender an receiver can use this program, the arguments define whether it's invoked to send or to listen
    # The -c, -e, -u imply the -l command, because apply only to the listener side of communication
    # The sender connects to the listener and only needs the -t and -p argumentos to connect  
    parser.add_argument('-c', '--command', action='store_true', help='Sets up a command shell')
    parser.add_argument('-e', '--execute', help='Execute one specified command')
    parser.add_argument('-l', '--listen', action='store_true', help='Set server to listen requests')
    parser.add_argument('-p', '--port', type=int, default=5555, help='Specified port')
    parser.add_argument('-t', '--target', default='127.0.0.1', help='Specified targuet IP')
    parser.add_argument('-u', '--upload', help='Specifies name of a file to upload')
    args = parser.parse_args()
    # If its setting up as a listener, invoke NetCat object with empty buffer string, otherwise
    # we send the buffer content from stdin
    if args.listen:
        buffer = ''
    else:
        buffer = sys.stdin.read()
    nc = NetCat(args, buffer.encode())
    nc.run()



