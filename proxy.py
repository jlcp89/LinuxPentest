import sys
import socket
import threading

# String to provide character if possible and '.' if not. This list gives a printable character
# representation of the first 256 integers  
HEX_FILTER = ''.join([(len(repr(chr(i))) == 3) and chr(i) or '.' for i in range(256)])

def hexdump(src, length=16, show=True):

    # Make sure have a string, decoding the bytes if a byte string was passed
    if  isinstance(src, bytes):
        src = src.decode()
    results = list()
    
    for i in range (0, len(src), length):
        
        # Grab a piece of the string to dump and put it into the word variable
        word = str(src[i:i+length])
        
        # Use translate to substitute the string representation of each character for the 
        # corresponding character in the raw string printable
        printable = word.translate(HEX_FILTER)
        
        # substitute the hex representation of the integer value of every character in the raw sring hexa
        hexa = ''.join([f'{ord(c):02X}' for c in word])
        hexwidth = length*3
        
        # Create a new array to hold the string, result, that contains the hex value of the index
        # of the first byte in the word, the hex value of the word and its printable representation
        results.append(f'{i:04x}    {hexa:=<{hexwidth}}   {printable}')
    
    if show:
        for line in results:
            print(line)
    else:
        return results
    
# For receiving both local and remote data, pass in the socket used
def receive_from(connection):

    # Create empty string that will accumulate responses from the socket
    buffer = b''

    # By default, set a five secont time out with migth be aggresive if you are proxying traffic 
    # to other countries or over lossy networks, increase as necessary
    connection.settimeout(5)

    try:

        # set up a loop to read response data into buffer until theres no more data or we time out
        while True:
            data=connection.recv(4096)
            if not data:
                break
            buffer += data
    except Exception as e:
        pass

    # Return the buffer byte string to the caller, which could be either the local or remote machine
    return buffer

# Functions to modify the response or request packets before the proxy sends them on their way
def request_handler(buffer):
    # perform packet modifications
    return buffer

def response_handler(buffer):
    # perform packet modifications
    return buffer

# Function that contains bulk of the logic for proxy
def proxy_handler(client_socket, remote_host, remote_port, receive_first):
    
    # Create socket objetc and connect it to the remote host
    remote_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    remote_socket.connect((remote_host, remote_port))
    
    # Check to make sure don't need to first initiate a connection to remote side and request
    # data before going into the main loop, FPT servers tipically send banner first
    if receive_first:

        # Use receive_from for both sidees of the communication, it accepts a connected socket
        # object and performs a receive.  Dump the contents of the packet so that we can inspect it
        # for anything interesting
        remote_buffer = receive_from(remote_socket)
        hexdump(remote_buffer)
    
    # Hand the output to the response_handler and then send the received buffer to the local client
    remote_buffer = response_handler(remote_buffer)

    if len(remote_buffer):
        print



    
# Test text for the hexdump function
hexdump('python rocks\n and proxies roll\n')